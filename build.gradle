plugins {
	id 'org.springframework.boot' version '2.7.18'
	id 'java'
	id 'org.owasp.dependencycheck' version '12.1.0'
	id 'org.sonarqube' version '3.5.0.2730'
}

apply plugin: 'io.spring.dependency-management'

group = 'uk.gov.hmcts.plum'
version = '0.0.1-SNAPSHOT'

repositories {
	mavenCentral()
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations.all {
  resolutionStrategy {
    eachDependency { DependencyResolveDetails details ->
      if (details.requested.group == 'ch.qos.logback') {
        details.useVersion '1.4.14'
      }
    }
  }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-batch'
  implementation 'org.springframework.boot:spring-boot-starter-logging'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.batch:spring-batch-test'

  implementation 'com.h2database:h2:2.3.232'
  implementation 'ch.qos.logback:logback-core:1.5.14'
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'dependency-check-suppressions.xml'
  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
  skipConfigurations = [
    "checkstyle",
    "compileOnly",
    "pmd",
    "integrationTest",
    "functionalTest",
    "smokeTest",
    "contractTestRuntimeClasspath",
    "contractTestCompileClasspath"
  ]
}

bootJar {
	archiveFileName = 'cnp-plum-batch.jar'
	manifest {
		attributes('Implementation-Version': project.version.toString())
	}
}


sonarqube {
	properties {
		property "sonar.projectName", "cnp-plum-batch"
		property "sonar.projectKey", "cnp-plum-batch"
	}
}


tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
    reports {
        junitXml.required = true
    }
}
